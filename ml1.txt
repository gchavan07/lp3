import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

df = pd.read_csv ("uber.csv")
df.head()

df.drop(columns = ['Unnamed: 0','key'],inplace=True)

df.info()

df.dropna(how='any',inplace=True)

df.isnull().sum()

for col in df.select_dtypes(exclude =['object']):
    plt.figure()
    sns.boxplot(data=df ,x =col)

valid_latitude = (df['pickup_latitude'] > -90) & (df['pickup_latitude'] < 90) & (df['dropoff_latitude'] > -90) & (df['dropoff_latitude'] < 90)
valid_longitude = (df['pickup_longitude'] > -180) & (df['pickup_longitude'] < 180) & (df['dropoff_longitude'] > -180) & (df['dropoff_longitude'] < 180)
valid_fare_amount = df['fare_amount'] > 0
valid_passenger_count = (df['passenger_count'] > 0) & (df['passenger_count'] < 50)
filtered_df = df[valid_latitude & valid_longitude & valid_fare_amount & valid_passenger_count]


import pandas as pd
import numpy as np
def distance(lat_1, lon_1, lat_2, lon_2):
    lat_1 = np.radians(lat_1)
    lon_1 = np.radians(lon_1)
    lat_2 = np.radians(lat_2)
    lon_2 = np.radians(lon_2)
    diff_lon = lon_2 - lon_1
    diff_lat = lat_2 - lat_1
    a = (np.sin(diff_lat / 2)**2) + (np.cos(lat_1) * np.cos(lat_2) * np.sin(diff_lon / 2)**2)
    c = 2 * np.arcsin(np.sqrt(a))  # Radius of the Earth in kilometers
    km = 6371 * c
    return km


distances = distance(df['pickup_latitude'], df['pickup_longitude'], df['dropoff_latitude'], df['dropoff_longitude'])
distances_series = pd.Series(distances)
print(distances_series.head())

temp = distance(df['pickup_latitude'], df['pickup_longitude'], df['dropoff_latitude'], df['dropoff_longitude'])
df_new = df.copy()
df_new['Distance'] = temp
df = df_new
df.head()

sns.boxplot(data =df,x='Distance')

df = df[(df['Distance']<200)&(df['Distance']>0)]



df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'])
df['week_day']=df['pickup_datetime'].dt.day_name()
df['Year']=df['pickup_datetime'].dt.year
df['Month']=df['pickup_datetime'].dt.month
df['Hour']=df['pickup_datetime'].dt.hour

df.drop(columns=['pickup_datetime','pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude'],inplace=True)

df.head()

temp = df.copy()

def convert_week_day(day):
    if day in ['Monday','Tuesday','Wednesday','Thursday']:
        return 0 # Weekday
    return 1 # Weekend

def convert_hour(hour):
    if 5 <= hour <= 12:
        return 1
    elif 12 < hour <= 17:
        return 2
    elif 17 < hour < 24:
        return 3
    return 0

df['week_day'] = temp['week_day'].apply(convert_week_day)
df['Hour'] = temp['Hour'].apply(convert_hour)
df.head()

df.corr()

sns.scatterplot(y=df['fare_amount'],x=df['Distance'])


from sklearn.preprocessing import StandardScaler
x = df[['Distance']].values
y = df['fare_amount'].values.reshape(-1,1)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train,y_test = train_test_split(x,y,random_state=10)
std_x = StandardScaler()
x_train = std_x.fit_transform(x_train)
x_test = std_x.transform(x_test)
std_y = StandardScaler()
y_train = std_y.fit_transform(y_train)
y_test = std_y.transform(y_test)

from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error
def fit_predict(model):
    model.fit(x_train,y_train.ravel())
    y_pred = model.predict(x_test)
    r_squared = r2_score(y_test,y_pred)
    RMSE = mean_squared_error(y_test, y_pred,squared=False)
    MAE = mean_absolute_error(y_test,y_pred)
    print('R-squared: ', r_squared)
    print('RMSE: ', RMSE)
    print("MAE:  ",MAE)
from sklearn.linear_model import LinearRegression
fit_predict(LinearRegression())

